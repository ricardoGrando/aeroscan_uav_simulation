<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<robot name="$(arg mav_name)" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Instantiate the mav-->
  <xacro:include filename="$(find aeroscan_uav_simulation)/urdf/$(arg mav_name)_base.xacro" />

  <!-- Mount a generic odometry sensor without odometry map (working everywhere). -->
  <xacro:odometry_plugin_macro
    namespace="${namespace}"
    odometry_sensor_suffix="1"
    parent_link="${namespace}/base_link"
    pose_topic="odometry_sensor1/pose"
    pose_with_covariance_topic="odometry_sensor1/pose_with_covariance"
    position_topic="odometry_sensor1/position"
    transform_topic="odometry_sensor1/transform"
    odometry_topic="odometry_sensor1/odometry"
    parent_frame_id="world"
    child_frame_id="${namespace}/odometry_sensor1"
    mass_odometry_sensor="0.00001"
    measurement_divisor="1"
    measurement_delay="0"
    unknown_delay="0.0"
    noise_normal_position="0 0 0"
    noise_normal_quaternion="0 0 0"
    noise_normal_linear_velocity="0 0 0"
    noise_normal_angular_velocity="0 0 0"
    noise_uniform_position="0 0 0"
    noise_uniform_quaternion="0 0 0"
    noise_uniform_linear_velocity="0 0 0"
    noise_uniform_angular_velocity="0 0 0"
    enable_odometry_map="false"
    odometry_map=""
    image_scale="">
    <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> <!-- [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] -->
    <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
  </xacro:odometry_plugin_macro>




  <xacro:property name="frame_rate" value="30.0" />

  <joint name="${namespace}/camera_joint" type="fixed">
    <origin xyz="0.2 0 0" rpy="0 0 0" />
    <parent link="${namespace}/base_link" />
    <child link="${namespace}/camera_link" />
  </joint>

  <link name="${namespace}/camera_link">
    <xacro:box_inertial x="0.001" y="0.001" z="0.001" mass="${mass_arm/3}">
      <origin xyz="${arm_length/6} 0 0" />
    </xacro:box_inertial>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>


  <!-- Define Macro to add a depth camera using noisy depth plugin  -->
  <xacro:macro name="rgbd_sensor_depth_macro"
    params="namespace parent_link camera_suffix frame_rate width height fov max_range min_range baseline *origin">
    <link name="${namespace}/camera_${camera_suffix}_link">
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <cylinder length="0.01" radius="0.007" />
        </geometry>
      </collision>
      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>
    <joint name="${namespace}/camera_${camera_suffix}_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/camera_${camera_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>

    <link name="${namespace}/camera_${camera_suffix}_optical_center_link" />
    <joint name="${namespace}/camera_${camera_suffix}_optical_center_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}" />
      <parent link="${namespace}/camera_${camera_suffix}_link" />
      <child link="${namespace}/camera_${camera_suffix}_optical_center_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>

    <!-- Call rgb sensor macro-->
    <!-- RGB sensor has "unlimited ranges"-->
    <xacro:camera_macro
            namespace="${namespace}"
            parent_link="${namespace}/base_link"
            camera_suffix="rgb"
            frame_rate="${frame_rate}"
            horizontal_fov="${fov}"
            image_width="${width}"
            image_height="${height}"
            image_format="R8G8B8"
            min_distance="0.01"
            max_distance="500"
            noise_mean="0.0"
            noise_stddev="0.007"
            enable_visual="false">
      <box size="0.01 0.01 0.1" />
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </xacro:camera_macro>

    <gazebo reference="${namespace}/camera_${camera_suffix}_link">
      <sensor type="depth" name="${namespace}_camera_{camera_suffix}">
        <always_on>true</always_on>
        <update_rate>${frame_rate}</update_rate>
        <camera>
          <horizontal_fov>${fov}</horizontal_fov>
          <image>
            <format>L8</format>
            <width>${width}</width>
            <height>${height}</height>
          </image>
          <clip>
            <near>${min_range}</near>
            <far>${max_range}</far>
          </clip>
        </camera>
        <plugin name="${namespace}_camera_{camera_suffix}" filename="librotors_gazebo_noisydepth_plugin.so">
          <robotNamespace>${namespace}</robotNamespace>
          <alwaysOn>true</alwaysOn>
          <baseline>${baseline}</baseline>
          <updateRate>${frame_rate}</updateRate>
          <cameraName>camera_${camera_suffix}</cameraName>
          <horizontal_fov>${fov}</horizontal_fov>
 	  <depthNoiseModelName>D435</depthNoiseModelName>
 	  <depthNoiseMinDist>0.02</depthNoiseMinDist>
 	  <depthNoiseMaxDist>50.0</depthNoiseMaxDist>
	  <D435NoiseSubpixelErr>0.25</D435NoiseSubpixelErr>
	  <D435MaxStdev>3</D435MaxStdev>
          <imageTopicName>camera/image_raw</imageTopicName>
          <cameraInfoTopicName>camera/camera_info</cameraInfoTopicName>
          <depthImageTopicName>depth/image_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>depth/points</pointCloudTopicName>
          <frameName>camera_${camera_suffix}_optical_center_link</frameName>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- Call depth sensor macro
    Realsense values -
      91.2 Deg Horizontal FOV
      848x480 Optimal depth resolution
        w 195 mm minimium-z depth
      5 cm baseline.
  -->
  <xacro:rgbd_sensor_depth_macro
    namespace="${namespace}" parent_link="${namespace}/camera_link"
    camera_suffix="depth"
    frame_rate="90.0"
    fov = "1.59174"
    baseline = "0.05"
    width = "1080"
    height = "760"
    max_range="500.0"
    min_range="0.195">
    <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
  </xacro:rgbd_sensor_depth_macro>



  <!-- <xacro:camera_fisheye
    namespace="${namespace}"
    parent_link="${namespace}/camera_link"
    camera_suffix="fisheye"
    frame_rate="${frame_rate}"
    horizontal_fov="6.283"
    image_width="1080"
    image_height="760"
    min_distance="0.1"
    max_distance="100"
    noise_mean="0.0"
    noise_stddev="0.007"
    enable_visual="true">
    <box size="0.001 0.001 0.001" />
    <origin xyz="0 0 0.0" rpy="0 0 0" />
  </xacro:camera_fisheye> -->
</robot>
